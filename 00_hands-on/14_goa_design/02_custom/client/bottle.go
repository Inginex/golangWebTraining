// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "cellar": bottle Resource Client
//
// Command:
// $ goagen
// --design=github.com/sampalm/goa/cellar/design
// --out=$(GOPATH)\src\github.com\sampalm\goa\cellar
// --version=v1.3.1

package client

import (
	"bytes"
	"context"
	"fmt"
	"net/http"
	"net/url"
	"strconv"
)

// CreateBottlePayload is the bottle create action payload.
type CreateBottlePayload struct {
	// Bottle brand
	Brand string `form:"brand" json:"brand" xml:"brand"`
	// Bottle name
	Name string `form:"name" json:"name" xml:"name"`
}

// CreateBottlePath computes a request path to the create action of bottle.
func CreateBottlePath() string {

	return fmt.Sprintf("/bottles/")
}

// CreateBottle makes a request to the create action endpoint of the bottle resource
func (c *Client) CreateBottle(ctx context.Context, path string, payload *CreateBottlePayload, contentType string) (*http.Response, error) {
	req, err := c.NewCreateBottleRequest(ctx, path, payload, contentType)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewCreateBottleRequest create the request corresponding to the create action endpoint of the bottle resource.
func (c *Client) NewCreateBottleRequest(ctx context.Context, path string, payload *CreateBottlePayload, contentType string) (*http.Request, error) {
	var body bytes.Buffer
	if contentType == "" {
		contentType = "*/*" // Use default encoder
	}
	err := c.Encoder.Encode(payload, &body, contentType)
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	if contentType == "*/*" {
		header.Set("Content-Type", "application/json")
	} else {
		header.Set("Content-Type", contentType)
	}
	return req, nil
}

// DeleteBottlePath computes a request path to the delete action of bottle.
func DeleteBottlePath(bottleID int) string {
	param0 := strconv.Itoa(bottleID)

	return fmt.Sprintf("/bottles/%s", param0)
}

// DeleteBottle makes a request to the delete action endpoint of the bottle resource
func (c *Client) DeleteBottle(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewDeleteBottleRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewDeleteBottleRequest create the request corresponding to the delete action endpoint of the bottle resource.
func (c *Client) NewDeleteBottleRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// ListBottlePath computes a request path to the list action of bottle.
func ListBottlePath() string {

	return fmt.Sprintf("/bottles/")
}

// Get all bottles
func (c *Client) ListBottle(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewListBottleRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListBottleRequest create the request corresponding to the list action endpoint of the bottle resource.
func (c *Client) NewListBottleRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// ShowBottlePath computes a request path to the show action of bottle.
func ShowBottlePath(bottleID int) string {
	param0 := strconv.Itoa(bottleID)

	return fmt.Sprintf("/bottles/%s", param0)
}

// Get bottle by id
func (c *Client) ShowBottle(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewShowBottleRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewShowBottleRequest create the request corresponding to the show action endpoint of the bottle resource.
func (c *Client) NewShowBottleRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}
